import type { NextPage } from "next";
import Head from "next/head";
import { useRouter } from "next/router";
import Image from "next/image";

import SearchBar from "src/components/SearchBar";
import NavBar from "src/components/NavBar";
import Banner from "styles/channelDetail/BannerStyle";

import ChannelInfo from "src/components/ChannelInfo";
import {
  ChannelInfoContainer,
  ChannelInfoContainerInnerWrapper,
  ChannelInfoImgTextWrapper,
  ImgDiv,
} from "styles/channelDetail/ChannelInfoContainerStyle";
import TitleImg from "/public/images/titleImg.jpg";
import Tags from "src/components/Tags";
import ChannelMinsimText from "src/components/ChannelMinsimText";
import VideoListTitle from "styles/channelDetail/VideoListSectionTitleStyle";
import {
  VideoListContainer,
  VideoListContainerInnerWrapper,
} from "styles/channelDetail/VideoListContainerStyle";
import VideoTags from "src/components/VideoTags";
import { useEffect, useState } from "react";
import VideoList from "src/components/VideoList";
import apiIniVideoList from "src/pages/api/apiIniVideoList";
import { useQuery } from "@tanstack/react-query";
import SearchList from "src/components/SearchList";
import { useRecoilState, useRecoilValue } from "recoil";
import { aChData } from "states/atom";
import apiChannelMinsim from 'src/pages/api/apiChannelMinsim';

interface IVideo {
  categoryId: number;
  channelTitle: string;
  comment: number;
  description: string;
  id: string;
  like: number;
  nextToken: string;
  tag: string[];
  thumbnail: string;
  time: string;
  title: string;
  view: number;
}

interface ISearchItem {
  id: string;
  banner: string;
  name: string;
  description: string;
  subscriber: number;
  video: number;
  thumbnail: string;
  time: string;
  view: number;
}

const ChannelDetailPage: NextPage = () => {
  const router = useRouter();
  const query = router.query;
  
  
  const [chData, setChData] = useRecoilState<ISearchItem>(aChData);
  const { data: videos, status } = useQuery<IVideo[]>(
    ["video", query.channel_id],
    () => {
      return apiIniVideoList(query.channel_id);
    }
  );
  const {data: channelMinsimData, status: minsimStatus} = useQuery(["channelMinsim", query.channel_id], async ()=>{return await apiChannelMinsim(query.channel_id)})  
  console.log(channelMinsimData);
  

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main>
        <NavBar />
        <section>
          <Banner src={chData.banner} alt="배너" />
          <ChannelInfoContainer>
            <ChannelInfoContainerInnerWrapper>
              <ChannelInfoImgTextWrapper>
                <ImgDiv>
                  <Image
                    src={chData.thumbnail}
                    alt="채널 대표 이미지"
                    layout="fill"
                    objectFit="cover"
                    style={{ borderRadius: "50%" }}
                  />
                </ImgDiv>
                <ChannelInfo
                  title={chData?.name}
                  subscriber={chData?.subscriber}
                  video={chData?.video}
                  description={chData?.description}
                ></ChannelInfo>
              </ChannelInfoImgTextWrapper>
              <Tags />
            </ChannelInfoContainerInnerWrapper>
          </ChannelInfoContainer>

          <ChannelMinsimText
            title="채널 민심"
            mainText={`${channelMinsimData} 떡상? 떡락?`}
          ></ChannelMinsimText>
          <ChannelMinsimText
            title="채널 키워드"
            mainText={`${channelMinsimData} 떡상? 떡락?`}
          ></ChannelMinsimText>
        </section>
        <section>
          <VideoListTitle>채널 영상</VideoListTitle>
          
          {/* 라우터 푸시로 필요한 것 - 채널 아이디랑 채널 이름  */}
          <VideoListContainer>
            {videos ? <VideoList videos={videos} /> : <></>}
          </VideoListContainer>
        </section>
      </main>
    </div>
  );
};

export default ChannelDetailPage;